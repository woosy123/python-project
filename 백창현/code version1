import tkinter as tk
from tkinter import messagebox
from tkinter import simpledialog
from PIL import Image, ImageTk
import random
import time
import csv

class FlagGameApp:
    def __init__(self, master):
        self.master = master
        self.master.title("국기 맞추기 게임")
        self.master.geometry("400x300")

        self.flag_images = self.load_flag_images("flag_images.csv")
        self.flag_names = list(self.flag_images.keys())
        self.current_flag = ""
        self.score = 0
        self.total_flags = 0
        self.start_time = 0
        self.time_limit = 180  # 3 minutes

        self.name = simpledialog.askstring("이름 입력", "이름을 입력하세요.")

        self.create_widgets()

    def load_flag_images(self, filename):
        flag_images = {}
        with open(filename, "r", encoding="utf-8") as file:
            reader = csv.reader(file)
            for row in reader:
                flag_name = row[0]
                flag_path = row[1]
                flag_image = Image.open(flag_path)
                flag_images[flag_name] = flag_image

        return flag_images

    def create_widgets(self):
        self.flag_label = tk.Label(self.master)
        self.flag_label.pack()

        self.score_label = tk.Label(self.master, text="점수: 0")
        self.score_label.pack()

        self.answer_entry = tk.Entry(self.master)
        self.answer_entry.pack()

        self.submit_button = tk.Button(self.master, text="제출", command=self.check_answer)
        self.submit_button.pack()

        self.start_game()

    def start_game(self):
        self.total_flags = 0
        self.score = 0
        self.start_time = time.time()
        self.get_next_flag()

    def get_next_flag(self):
        if self.total_flags > 0:
            self.update_score()

        if self.total_flags >= 10:
            self.end_game()
            return

        self.answer_entry.delete(0, tk.END)
        self.current_flag = random.choice(self.flag_names)
        flag_image = self.flag_images[self.current_flag]
        flag_image = flag_image.resize((200, 150))  # Adjust image size if necessary
        flag_photo = ImageTk.PhotoImage(flag_image)
        self.flag_label.configure(image=flag_photo)
        self.flag_label.image = flag_photo

        self.total_flags += 1

    def check_answer(self):
        user_answer = self.answer_entry.get()
        if user_answer.lower() == self.current_flag.lower():
            self.score += 1

        self.get_next_flag()

    def update_score(self):
        self.score_label.configure(text=f"점수: {self.score}")

    def end_game(self):
        elapsed_time = int(time.time() - self.start_time)
        messagebox.showinfo("게임 종료", f"게임이 종료되었습니다!\n이름: {self.name}\n점수: {self.score}\n경과 시간: {elapsed_time}초")
        self.save_result()

    def save_result(self):
        filename = "flag_game_results.csv"
        with open(filename, "a", newline="", encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow([self.name, self.score])

# 애플리케이션 실행
root = tk.Tk()
app = FlagGameApp(root)
root.mainloop()



